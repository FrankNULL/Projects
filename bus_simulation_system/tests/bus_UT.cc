// /* STUDENTS:  DO NOT EDIT THIS FILE.  INSTEAD, MODIFY YOUR OWN PROJECT
//  * CODE TO FIT THE SPECIFICATION GIVEN BY THE TESTS IN THIS FILE.
//  *
//  * If you DO modify it, we overwrite it with a fresh version from our repo
//  * when grading, so you can't use it to fudge the tests anyway.
//  *
//  * This file is used by the CS3081W auto-grading system.
//  *
//  * Please note, the assessment tests for grading, will use the same include
//  * files, class names, and function names for accessing students' code that you
//  * find in this file.  So students, if you write your code so that it passes
//  * these feedback tests, you can be assured that the auto-grader will at least
//  * be able to properly link with your code.
//  */

/*******************************************************************************
 * Includes
 ******************************************************************************/
#include <gtest/gtest.h>

#include <iostream>
#include <string>
#include <list>
#include <string>


#include "../src/bus.h"
#include "../src/stop.h"
#include "../src/random_passenger_generator.h"
#include "../src/passenger.h"
#include "../src/route.h"
#include "../src/route.h"

using namespace std;

/******************************************************
* TEST FEATURE SetUp
*******************************************************/
class BusTests : public ::testing::Test {
 protected:
  Passenger* passenger;
  Stop** stops;
  Stop* stop1;
  double list[1];
  RandomPassengerGenerator * generator1;

  Passenger* passenger1;
  Stop** stops1;
  Stop* stop11;
  RandomPassengerGenerator * generator11;

  Route *in, *out;
  Bus *bus, *bus1, *bus2;

 virtual void SetUp() {
    passenger = new Passenger();
    stop1 = new Stop(2, 2.0, 1.2);
    stops = new Stop*[1];
    stops[0] = stop1;
    list[0] = 20.0;
    std::list<double> prob;
    std:: list<Stop*> stop2;
    generator1 = new RandomPassengerGenerator(prob, stop2);


    passenger1 = new Passenger();
    stop11 = new Stop(7, 3.1, 6.6);
    stops1 = new Stop*[1];
    stops1[0] = stop1;



    in = new Route("UMN", stops, list, 1, generator1);
    out = new Route("E", stops1, list, 1, generator1);


  }

  virtual void TearDown() {
    delete bus;
    bus = NULL;


    delete bus1;
    bus1 = NULL;
    delete in;
    in = NULL;
    delete out;
    out = NULL;


  }
};


/*******************************************************************************
 * Test Cases
 ******************************************************************************/
TEST_F(BusTests, Constructor) {

  SetUp();
  bus = new Bus("School Bus", in, out);
  EXPECT_EQ(bus->GetName(), "School Bus");
  EXPECT_EQ(bus->GetCapacity(), 60);

  bus1 = new Bus("3", in, out, 40, 2);
  EXPECT_EQ(bus1->GetName(), "3");
  EXPECT_EQ(bus1->GetCapacity(), 40);


  TearDown();

};

TEST_F(BusTests, IsTripComplete) {
  SetUp();

  bus = new Bus("School Bus", in, out);
  EXPECT_EQ(bus->IsTripComplete(), false);

  in->ToNextStop();
  out->ToNextStop();

  EXPECT_EQ(bus->IsTripComplete(), true);

  TearDown();

};

TEST_F(BusTests, LoadPassenger) {
  SetUp();

  bus = new Bus("School Bus", in, out,1);
  EXPECT_EQ(bus->LoadPassenger(passenger), true);
  EXPECT_EQ(bus->LoadPassenger(passenger1), false);

  TearDown();

};

TEST_F(BusTests, Move) {
  SetUp();

  bus = new Bus("School Bus", in, out);
  EXPECT_EQ(bus->Move(), false);
  EXPECT_EQ(bus->Move(), true);
  EXPECT_EQ(bus->Move(), false);
};
